// Enhanced WeeklyProgramComponent.tsx - UI improvements
// This adds more interactivity and better user experience

import React, { useState, useEffect, useRef } from 'react';
import {
  View,
  Text,
  StyleSheet,
  TouchableOpacity,
  ScrollView,
  Animated,
  LayoutAnimation,
  Platform,
  UIManager,
  Share,
  Modal,
  TextInput
} from 'react-native';
import { Ionicons } from '@expo/vector-icons';
import { WeeklyProgramData, ProgramDay, Exercise } from '../services/AICoachService';
import * as Haptics from 'expo-haptics';

// Enable layout animations for Android
if (Platform.OS === 'android' && UIManager.setLayoutAnimationEnabledExperimental) {
  UIManager.setLayoutAnimationEnabledExperimental(true);
}

interface WeeklyProgramProps {
  program: WeeklyProgramData;
  onComplete?: () => void;
}

const WeeklyProgramComponent: React.FC<WeeklyProgramProps> = ({ program, onComplete }) => {
  const [selectedDay, setSelectedDay] = useState<string | null>(null);
  const [expandedView, setExpandedView] = useState<boolean>(false);
  const [completedExercises, setCompletedExercises] = useState<{ [key: string]: boolean }>({});
  const [showNotesModal, setShowNotesModal] = useState<boolean>(false);
  const [currentDayForNotes, setCurrentDayForNotes] = useState<string>('');
  const [notesText, setNotesText] = useState<string>('');
  const [notesMap, setNotesMap] = useState<{ [key: string]: string }>({});
  
  // Animation value for progress indicator
  const progressAnimation = useRef(new Animated.Value(0)).current;
  
  // Calculate completion percentage
  const calculateCompletion = () => {
    const totalExercises = program.days.reduce((count, day) => 
      count + (day.isRestDay ? 0 : day.exercises.length), 0);
    
    const completedCount = Object.values(completedExercises).filter(Boolean).length;
    
    return totalExercises > 0 ? (completedCount / totalExercises) * 100 : 0;
  };
  
  // Update progress animation when completed exercises change
  useEffect(() => {
    const completionPercentage = calculateCompletion();
    
    Animated.timing(progressAnimation, {
      toValue: completionPercentage / 100,
      duration: 500,
      useNativeDriver: false,
    }).start();
  }, [completedExercises]);
  
  // Toggle expanded view for a workout day
  const toggleDay = (day: string) => {
    LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
    setSelectedDay(selectedDay === day ? null : day);
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
  };
  
  // Toggle expanded view for the entire program
  const toggleExpandedView = () => {
    LayoutAnimation.configureNext(LayoutAnimation.Presets.easeInEaseOut);
    setExpandedView(!expandedView);
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Light);
  };
  
  // Toggle exercise completion
  const toggleExerciseCompletion = (dayId: string, exerciseIndex: number) => {
    const exerciseId = `${dayId}-${exerciseIndex}`;
    
    setCompletedExercises(prev => ({
      ...prev,
      [exerciseId]: !prev[exerciseId]
    }));
    
    Haptics.impactAsync(Haptics.ImpactFeedbackStyle.Medium);
  };
  
  // Share program with friends
  const shareProgram = async () => {
    try {
      const result = await Share.share({
        message: `Check out my ${program.level} ${program.focusArea} workout program: ${program.title}\n\n${program.description}\n\nGenerated by Fitness Warrior AI Coach`,
        title: program.title,
      });
      
      if (result.action === Share.sharedAction) {
        Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
      }
    } catch (error) {
      console.error('Error sharing program:', error);
    }
  };
  
  // Open notes modal for a specific day
  const openNotesModal = (day: string) => {
    setCurrentDayForNotes(day);
    setNotesText(notesMap[day] || '');
    setShowNotesModal(true);
  };
  
  // Save notes for a day
  const saveNotes = () => {
    setNotesMap(prev => ({
      ...prev,
      [currentDayForNotes]: notesText
    }));
    
    setShowNotesModal(false);
    Haptics.notificationAsync(Haptics.NotificationFeedbackType.Success);
  };
  
  // Render an individual exercise item
  const renderExercise = (exercise: Exercise, index: number, dayId: string) => {
    const exerciseId = `${dayId}-${index}`;
    const isCompleted = completedExercises[exerciseId] || false;
    
    return (
      <View key={index} style={styles.exerciseItem}>
        <TouchableOpacity 
          style={[
            styles.exerciseCheckbox, 
            isCompleted && styles.exerciseCheckboxCompleted
          ]}
          onPress={() => toggleExerciseCompletion(dayId, index)}
        >
          {isCompleted && <Ionicons name="checkmark" size={16} color="#fff" />}
        </TouchableOpacity>
        
        <View style={styles.exerciseContent}>
          <Text style={[
            styles.exerciseName,
            isCompleted && styles.exerciseNameCompleted
          ]}>
            {exercise.name}
          </Text>
          <Text style={styles.exerciseDetails}>
            {exercise.reps ? `${exercise.reps} reps` : ''}
            {exercise.reps && exercise.duration ? ' • ' : ''}
            {exercise.duration ? exercise.duration : ''}
            {(exercise.reps || exercise.duration) && exercise.intensity ? ' • ' : ''}
            {exercise.intensity ? `${exercise.intensity} intensity` : ''}
          </Text>
          {exercise.description && (
            <Text style={styles.exerciseDescription}>{exercise.description}</Text>
          )}
        </View>
      </View>
    );
  };
  
  // Render an individual day card
  const renderDayCard = (day: ProgramDay) => {
    const isSelected = selectedDay === day.day;
    const isRestDay = day.isRestDay || day.exercises.length === 0;
    const hasNotes = notesMap[day.day] && notesMap[day.day].length > 0;
    
    return (
      <TouchableOpacity
        key={day.day}
        style={[
          styles.dayCard,
          isSelected && styles.selectedDayCard,
          isRestDay && styles.restDayCard
        ]}
        onPress={() => toggleDay(day.day)}
        activeOpacity={0.7}
      >
        <View style={styles.dayHeader}>
          <View style={styles.dayInfo}>
            <Text style={styles.dayText}>{day.day}</Text>
            <View style={styles.workoutTypeContainer}>
              <Text style={styles.workoutType}>{day.workoutType}</Text>
              {hasNotes && (
                <Ionicons name="document-text" size={14} color="#6200ee" style={styles.notesIcon} />
              )}
            </View>
          </View>
          
          <View style={styles.dayActions}>
            {!isRestDay && (
              <TouchableOpacity
                style={styles.notesButton}
                onPress={() => openNotesModal(day.day)}
              >
                <Ionicons name="create-outline" size={18} color="#6200ee" />
              </TouchableOpacity>
            )}
            
            <Ionicons
              name={isSelected ? 'chevron-up' : 'chevron-down'}
              size={20}
              color="#6200ee"
            />
          </View>
        </View>

        {isSelected && !isRestDay && (
          <View style={styles.exercisesContainer}>
            {day.exercises.map((exercise, index) => renderExercise(exercise, index, day.day))}
          </View>
        )}

        {isSelected && isRestDay && (
          <View style={styles.restDayContent}>
            <Ionicons name="bed-outline" size={36} color="#9C27B0" />
            <Text style={styles.restDayText}>
              Rest and recovery are essential for progress. Use this day to focus on sleep,
              hydration, and gentle mobility work.
            </Text>
          </View>
        )}
      </TouchableOpacity>
    );
  };
  
  // Calculate completion percentage
  const completionPercentage = calculateCompletion();
  
  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <View>
          <Text style={styles.title}>{program.title}</Text>
          <View style={styles.levelIndicator}>
            <Text style={styles.levelText}>
              Level: {program.level.charAt(0).toUpperCase() + program.level.slice(1)}
            </Text>
            <View style={styles.levelDots}>
              <View style={[
                styles.levelDot,
                styles.activeDot,
                program.level === 'intermediate' && styles.intermediateDot,
                program.level === 'advanced' && styles.advancedDot
              ]} />
              <View style={[
                styles.levelDot,
                (program.level === 'intermediate' || program.level === 'advanced') && styles.activeDot,
                program.level === 'advanced' && styles.advancedDot
              ]} />
              <View style={[
                styles.levelDot,
                program.level === 'advanced' && styles.activeDot,
                program.level === 'advanced' && styles.advancedDot
              ]} />
            </View>
          </View>
        </View>
        <TouchableOpacity
          onPress={toggleExpandedView}
          style={styles.expandButton}
        >
          <Ionicons
            name={expandedView ? 'contract' : 'expand'}
            size={22}
            color="#6200ee"
          />
        </TouchableOpacity>
      </View>

      {!expandedView ? (
        <Text style={styles.description}>{program.description}</Text>
      ) : (
        <ScrollView style={styles.descriptionScroll}>
          <Text style={styles.description}>{program.description}</Text>
          
          <View style={styles.focusSection}>
            <Text style={styles.focusTitle}>Program Focus:</Text>
            <Text style={styles.focusText}>{program.focusArea}</Text>
          </View>
          
          <View style={styles.tipsSection}>
            <Text style={styles.tipsTitle}>Program Tips:</Text>
            <View style={styles.tipsList}>
              <View style={styles.tipItem}>
                <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
                <Text style={styles.tipText}>Warm up for 5-10 minutes before each workout</Text>
              </View>
              <View style={styles.tipItem}>
                <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
                <Text style={styles.tipText}>Stay hydrated throughout your workout sessions</Text>
              </View>
              <View style={styles.tipItem}>
                <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
                <Text style={styles.tipText}>Cool down and stretch for 5-10 minutes after</Text>
              </View>
              <View style={styles.tipItem}>
                <Ionicons name="checkmark-circle" size={16} color="#4CAF50" />
                <Text style={styles.tipText}>Listen to your body and adjust intensity as needed</Text>
              </View>
            </View>
          </View>
        </ScrollView>
      )}
      
      {/* Progress Bar */}
      <View style={styles.progressContainer}>
        <Text style={styles.progressText}>Program Progress</Text>
        <View style={styles.progressBar}>
          <Animated.View 
            style={[
              styles.progressFill,
              { width: progressAnimation.interpolate({
                inputRange: [0, 1],
                outputRange: ['0%', '100%']
              })}
            ]}
          />
        </View>
        <Text style={styles.progressPercentage}>{Math.round(completionPercentage)}% Complete</Text>
      </View>

      <View style={styles.daysList}>
        <ScrollView>
          {program.days.map(renderDayCard)}
        </ScrollView>
      </View>

      <View style={styles.buttonContainer}>
        <TouchableOpacity
          style={styles.shareButton}
          onPress={shareProgram}
        >
          <Ionicons name="share-outline" size={20} color="#fff" />
          <Text style={styles.buttonText}>Share</Text>
        </TouchableOpacity>
        
        <TouchableOpacity 
          style={styles.saveButton}
          onPress={onComplete}
        >
          <Ionicons name="save-outline" size={20} color="#fff" />
          <Text style={styles.buttonText}>Save Program</Text>
        </TouchableOpacity>
      </View>
      
      {/* Notes Modal */}
      <Modal
        visible={showNotesModal}
        transparent={true}
        animationType="slide"
      >
        <View style={styles.modalOverlay}>
          <View style={styles.modalContent}>
            <View style={styles.modalHeader}>
              <Text style={styles.modalTitle}>Workout Notes for {currentDayForNotes}</Text>
              <TouchableOpacity onPress={() => setShowNotesModal(false)}>
                <Ionicons name="close" size={24} color="#333" />
              </TouchableOpacity>
            </View>
            
            <TextInput
              style={styles.notesInput}
              multiline
              placeholder="Enter notes about your workout (weight used, difficulty, etc.)"
              value={notesText}
              onChangeText={setNotesText}
            />
            
            <TouchableOpacity style={styles.saveNotesButton} onPress={saveNotes}>
              <Text style={styles.saveNotesText}>Save Notes</Text>
            </TouchableOpacity>
          </View>
        </View>
      </Modal>
    </View>
  );
};

// Add new styles for the enhanced UI components
const styles = StyleSheet.create({
  container: {
    backgroundColor: '#f5f5f5',
    borderRadius: 12,
    overflow: 'hidden',
    marginVertical: 8,
  },
  header: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  levelIndicator: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  levelText: {
    fontSize: 14,
    color: '#666',
    marginRight: 8,
  },
  levelDots: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  levelDot: {
    width: 8,
    height: 8,
    borderRadius: 4,
    backgroundColor: '#ddd',
    marginHorizontal: 2,
  },
  activeDot: {
    backgroundColor: '#4CAF50',
  },
  intermediateDot: {
    backgroundColor: '#FFC107',
  },
  advancedDot: {
    backgroundColor: '#F44336',
  },
  expandButton: {
    padding: 8,
    borderRadius: 20,
    backgroundColor: 'rgba(98, 0, 238, 0.1)',
  },
  description: {
    fontSize: 14,
    color: '#666',
    lineHeight: 20,
    padding: 16,
    paddingTop: 8,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  descriptionScroll: {
    maxHeight: 200,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  focusSection: {
    padding: 16,
    paddingTop: 0,
  },
  focusTitle: {
    fontSize: 15,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 4,
  },
  focusText: {
    fontSize: 14,
    color: '#666',
  },
  tipsSection: {
    padding: 16,
    paddingTop: 8,
  },
  tipsTitle: {
    fontSize: 15,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 8,
  },
  tipsList: {
    marginTop: 4,
  },
  tipItem: {
    flexDirection: 'row',
    alignItems: 'center',
    marginBottom: 6,
  },
  tipText: {
    fontSize: 14,
    color: '#666',
    marginLeft: 8,
    flex: 1,
  },
  progressContainer: {
    padding: 16,
    paddingTop: 8,
    paddingBottom: 8,
    backgroundColor: '#fff',
    borderBottomWidth: 1,
    borderBottomColor: '#eee',
  },
  progressText: {
    fontSize: 14,
    fontWeight: 'bold',
    color: '#333',
    marginBottom: 6,
  },
  progressBar: {
    height: 8,
    backgroundColor: '#e0e0e0',
    borderRadius: 4,
    overflow: 'hidden',
  },
  progressFill: {
    height: '100%',
    backgroundColor: '#4CAF50',
  },
  progressPercentage: {
    fontSize: 12,
    color: '#666',
    marginTop: 4,
    textAlign: 'right',
  },
  daysList: {
    maxHeight: 400,
  },
  dayCard: {
    backgroundColor: '#fff',
    borderRadius: 8,
    marginHorizontal: 16,
    marginVertical: 8,
    padding: 12,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 1 },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  selectedDayCard: {
    borderLeftWidth: 4,
    borderLeftColor: '#6200ee',
  },
  restDayCard: {
    backgroundColor: '#f5f9ff',
  },
  dayHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
  },
  dayInfo: {
    flex: 1,
  },
  dayText: {
    fontSize: 16,
    fontWeight: 'bold',
    color: '#333',
  },
  workoutTypeContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  workoutType: {
    fontSize: 14,
    color: '#666',
    marginTop: 2,
  },
  notesIcon: {
    marginLeft: 6,
  },
  dayActions: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  notesButton: {
    padding: 4,
    marginRight: 4,
  },
  exercisesContainer: {
    marginTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#eee',
    paddingTop: 12,
  },
  exerciseItem: {
    flexDirection: 'row',
    marginBottom: 12,
    alignItems: 'flex-start',
  },
  exerciseCheckbox: {
    width: 24,
    height: 24,
    borderRadius: 12,
    borderWidth: 2,
    borderColor: '#6200ee',
    marginRight: 12,
    marginTop: 2,
    justifyContent: 'center',
    alignItems: 'center',
  },
  exerciseCheckboxCompleted: {
    backgroundColor: '#6200ee',
  },
  exerciseContent: {
    flex: 1,
  },
  exerciseName: {
    fontSize: 15,
    fontWeight: '600',
    color: '#333',
    marginBottom: 2,
  },
  exerciseNameCompleted: {
    textDecorationLine: 'line-through',
    color: '#888',
  },
  exerciseDetails: {
    fontSize: 13,
    color: '#666',
  },
  exerciseDescription: {
    fontSize: 13,
    color: '#888',
    marginTop: 4,
    fontStyle: 'italic',
  },
  restDayContent: {
    marginTop: 12,
    borderTopWidth: 1,
    borderTopColor: '#eee',
    paddingTop: 12,
    alignItems: 'center',
  },
  restDayText: {
    fontSize: 14,
    color: '#666',
    textAlign: 'center',
    marginTop: 8,
    lineHeight: 20,
  },
  buttonContainer: {
    flexDirection: 'row',
    padding: 16,
    paddingTop: 8,
  },
  saveButton: {
    backgroundColor: '#6200ee',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 14,
    borderRadius: 8,
    flex: 2,
  },
  shareButton: {
    backgroundColor: '#03A9F4',
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    padding: 14,
    borderRadius: 8,
    marginRight: 8,
    flex: 1,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
    marginLeft: 8,
  },
  modalOverlay: {
    flex: 1,
    backgroundColor: 'rgba(0, 0, 0, 0.5)',
    justifyContent: 'center',
    alignItems: 'center',
  },
  modalContent: {
    backgroundColor: '#fff',
    borderRadius: 12,
    width: '90%',
    padding: 20,
  },
  modalHeader: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    marginBottom: 16,
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    color: '#333',
  },
  notesInput: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 8,
    padding: 12,
    minHeight: 120,
    textAlignVertical: 'top',
  },
  saveNotesButton: {
    backgroundColor: '#6200ee',
    padding: 14,
    borderRadius: 8,
    alignItems: 'center',
    marginTop: 16,
  },
  saveNotesText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
});

export default WeeklyProgramComponent;